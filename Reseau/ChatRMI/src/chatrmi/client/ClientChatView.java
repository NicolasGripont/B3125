/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package chatrmi.client;

import chatrmi.protocol.ClientInterface;
import chatrmi.protocol.MessageInterface;
import java.awt.event.KeyEvent;
import java.rmi.RemoteException;
import javax.swing.DefaultListModel;
import javax.swing.KeyStroke;

/**
 *
 * @author Nico
 */
public class ClientChatView extends javax.swing.JFrame {

    
    Client client;
    DefaultListModel users;
    
    /**
     * Creates new form NewJFrame
     */
    public ClientChatView(Client c) {
        client = c;
        initComponents();
        setLocationRelativeTo(null);
        users = new DefaultListModel();
        clientsList.setModel(users);
        messageTextArea.getInputMap().put(KeyStroke.getKeyStroke("ENTER"),"none");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        clientsList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        messagesTextArea = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        messageTextArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        connectionMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        quitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ChatRMI");
        setMinimumSize(new java.awt.Dimension(400, 300));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.LINE_AXIS));

        jScrollPane1.setViewportView(clientsList);

        messagesTextArea.setEditable(false);
        messagesTextArea.setColumns(20);
        messagesTextArea.setLineWrap(true);
        messagesTextArea.setRows(5);
        jScrollPane2.setViewportView(messagesTextArea);

        sendButton.setText("Send");
        sendButton.setEnabled(false);
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        messageTextArea.setColumns(20);
        messageTextArea.setLineWrap(true);
        messageTextArea.setRows(4);
        messageTextArea.setEnabled(false);
        messageTextArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                messageTextAreaKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(messageTextArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sendButton)
                        .addGap(9, 9, 9)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(sendButton)))
                .addContainerGap())
        );

        getContentPane().add(jPanel1);

        jMenu1.setText("Chat");

        connectionMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ENTER, java.awt.event.InputEvent.CTRL_MASK));
        connectionMenuItem.setText("Connect");
        connectionMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectionMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(connectionMenuItem);
        jMenu1.add(jSeparator1);

        quitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitMenuItem.setText("Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(quitMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        // TODO add your handling code here:
        sendMessage();
    }//GEN-LAST:event_sendButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if (client != null && client.isConnected()) {
            client.disconnect();
        }
    }//GEN-LAST:event_formWindowClosing

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        // TODO add your handling code here:
        if (client != null && client.isConnected()) {
            client.disconnect();
        }
        dispose();
        System.exit(0);
    }//GEN-LAST:event_quitMenuItemActionPerformed

    private void connectionMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectionMenuItemActionPerformed
        // TODO add your handling code here:
        if(!client.isConnected()) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new ClientConnectionDialog(null, rootPaneCheckingEnabled,client).setVisible(true);
                }
            });
        }
        else
        {
            client.disconnect();
        }
    }//GEN-LAST:event_connectionMenuItemActionPerformed

    private void messageTextAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_messageTextAreaKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
        {
            if(!evt.isShiftDown())
            {
                sendMessage();
            }
            else
            {
                messageTextArea.setText(messageTextArea.getText()+"\n");
            }
        }
    }//GEN-LAST:event_messageTextAreaKeyPressed

    public void displayMessage(MessageInterface m) throws RemoteException {
        // TODO Auto-generated method stub
        StringBuilder sb = new StringBuilder();
        sb.append(messagesTextArea.getText());
        sb.append(String.format("[%s] %s : %s", m.getDateToString(), m.getUserName(), m.getTextMessage()));
        sb.append("\n");
        messagesTextArea.setText(sb.toString());
    }

    private void sendMessage(){
        if (client.isConnected()) {
            client.sendMessageToAll(messageTextArea.getText());
            messageTextArea.setText("");
        }
    }
    
    public void refresh() {
        if (client.isConnected()){
            connectionMenuItem.setText("Disconnect");
            sendButton.setEnabled(true);
            messageTextArea.setEnabled(true);
        } else {
            connectionMenuItem.setText("Connect");
            sendButton.setEnabled(false);
            messageTextArea.setEnabled(false);
            messagesTextArea.setText("");
        }
    }
    
    void addUser(ClientInterface c) throws RemoteException {
        if (c.getUserName().compareTo(client.getUserName())==0) {
            users.add(0, "You (" + c.getUserName() + ")");
        } else {
            users.addElement(c.getUserName());
        }
    }
    
    void removeUser(ClientInterface c) throws RemoteException {
        if (c.getUserName().compareTo(client.getUserName())==0) {
            users.removeAllElements();
            refresh();
        } else {
            users.removeElement(c.getUserName());
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList clientsList;
    private javax.swing.JMenuItem connectionMenuItem;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTextArea messageTextArea;
    private javax.swing.JTextArea messagesTextArea;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JButton sendButton;
    // End of variables declaration//GEN-END:variables

}
